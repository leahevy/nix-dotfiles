#!/usr/bin/env python3
"""
Convert Firefox bookmarks JSON export to qutebrowser bookmark format.
Usage: qutebrowser-bookmarks-from-firefox JSONFILE
"""

import json
import sys
import argparse
import re
from pathlib import Path

def clean_name(name):
    name = re.sub(r'[\U0001F600-\U0001F64F\U0001F300-\U0001F5FF\U0001F680-\U0001F6FF\U0001F1E0-\U0001F1FF\U00002600-\U000027BF\U0001F900-\U0001F9FF]', '', name)
    name = name.replace(" ", "-").replace("/", "-")
    name = re.sub(r'[^\w\-\.]', '', name)
    name = re.sub(r'-+', '-', name)
    name = name.strip('-')
    name = name.lower()
    return name or "unnamed"

def find_toolbar_bookmarks(data):
    def search_children(children):
        for item in children:
            if item.get("root") == "toolbarFolder":
                return item
            if "children" in item:
                result = search_children(item["children"])
                if result:
                    return result

    if "children" in data:
        return search_children(data["children"])
    return None

def extract_bookmarks(item):
    result = {}

    if item.get("typeCode") == 1:
        title = item.get("title", "Untitled")
        uri = item.get("uri")
        if uri:
            clean_title = clean_name(title)
            return clean_title, uri

    elif item.get("typeCode") == 2 and "children" in item:
        folder_title = clean_name(item.get("title", "Untitled"))
        folder_contents = {}

        for child in item["children"]:
            child_result = extract_bookmarks(child)
            if child_result:
                if isinstance(child_result, tuple):
                    name, url = child_result
                    folder_contents[name] = url
                elif isinstance(child_result, dict):
                    folder_contents.update(child_result)

        if folder_contents:
            return {folder_title: folder_contents}

    return None

def build_nested_structure(items):
    result = {}

    for item in items:
        item_result = extract_bookmarks(item)
        if item_result:
            if isinstance(item_result, tuple):
                name, url = item_result
                result[name] = url
            elif isinstance(item_result, dict):
                result.update(item_result)

    return result

def format_as_nix(bookmarks, indent=0):
    lines = []
    prefix = "  " * indent

    for key, value in bookmarks.items():
        if isinstance(value, str):
            lines.append(f'{prefix}"{key}" = "{value}";')
        elif isinstance(value, dict):
            lines.append(f'{prefix}"{key}" = {{')
            lines.append(format_as_nix(value, indent + 1))
            lines.append(f'{prefix}}};')

    return "\n".join(lines)

def main():
    parser = argparse.ArgumentParser(description="Convert Firefox bookmarks to qutebrowser format")
    parser.add_argument("jsonfile", help="Firefox bookmarks JSON export file")
    parser.add_argument("--output", "-o", help="Output file (default: stdout)")

    args = parser.parse_args()

    try:
        with open(args.jsonfile, 'r', encoding='utf-8') as f:
            data = json.load(f)
    except FileNotFoundError:
        print(f"Error: File '{args.jsonfile}' not found", file=sys.stderr)
        sys.exit(1)
    except json.JSONDecodeError as e:
        print(f"Error: Invalid JSON in '{args.jsonfile}': {e}", file=sys.stderr)
        sys.exit(1)

    toolbar = find_toolbar_bookmarks(data)
    if not toolbar:
        print("Error: Could not find toolbar bookmarks in the file", file=sys.stderr)
        sys.exit(1)

    bookmarks = {}
    if "children" in toolbar:
        bookmarks = build_nested_structure(toolbar["children"])

    if not bookmarks:
        print("No bookmarks found in toolbar", file=sys.stderr)
        sys.exit(1)

    output = format_as_nix(bookmarks)

    if args.output:
        with open(args.output, 'w', encoding='utf-8') as f:
            f.write(output)
        print(f"Bookmarks written to {args.output}")
    else:
        print(output)

if __name__ == "__main__":
    main()
