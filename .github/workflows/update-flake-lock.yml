name: Update Flake.lock
on:
  schedule:
    - cron: '0 13 * * *'
  workflow_dispatch:

jobs:
  update-flake-lock:
    runs-on: ubuntu-latest
    env:
      UPDATE_INPUTS: "nixpkgs"
      REPO_nixpkgs: "NixOS/nixpkgs"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v14

      - name: Extract commit hashes before update
        run: |
          set -euo pipefail

          get_lockfile_node() {
            nix flake metadata --json . | jq -r ".locks.nodes.root.inputs.$1"
          }

          IFS=',' read -ra inputs <<< "$UPDATE_INPUTS"

          declare -A old_commits
          for input in "${inputs[@]}"; do
            input=$(echo "$input" | xargs)
            node=$(get_lockfile_node "$input")
            if [ "$node" != "null" ]; then
              old_commit=$(nix flake metadata --json . | jq -r ".locks.nodes.$node.locked.rev")
              echo "OLD_COMMIT_$input=$old_commit" >> $GITHUB_ENV
              echo "Input $input: current commit $old_commit"
            fi
          done

      - name: Update flake inputs
        run: |
          set -euo pipefail

          IFS=',' read -ra inputs <<< "$UPDATE_INPUTS"
          updated_inputs=""

          for input in "${inputs[@]}"; do
            input=$(echo "$input" | xargs)
            echo "Updating input: $input"
            nix flake update "$input"
            if [ -z "$updated_inputs" ]; then
              updated_inputs="$input"
            else
              updated_inputs="$updated_inputs, $input"
            fi
          done
          echo "UPDATED_INPUTS=$updated_inputs" >> $GITHUB_ENV

      - name: Check for changes
        id: changes
        run: |
          set -euo pipefail
          if git diff --quiet flake.lock; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Generate commit lists
        if: steps.changes.outputs.changed == 'true'
        run: |
          set -euo pipefail

          get_lockfile_node() {
            nix flake metadata --json . | jq -r ".locks.nodes.root.inputs.$1"
          }

          get_repo() {
            local input=$1
            local repo_var="REPO_$input"
            echo "${!repo_var:-}"
          }

          REBOOT_PATTERNS="\blinux[-_][0-9]|\blinuxKernel\b|\blinuxPackages\b|\bkernelPackages\b|\bsystemd\b|\bglibc\b|\bmicrocode\b|\blinux-firmware\b|\bnix:\b|\bnix[[:space:]]|\bnix$"

          IFS=',' read -ra inputs <<< "$UPDATE_INPUTS"

          commit_lists=""
          reboot_commits=""
          requires_reboot="false"
          reboot_packages=""

          for input in "${inputs[@]}"; do
            input=$(echo "$input" | xargs)
            node=$(get_lockfile_node "$input")
            repo=$(get_repo "$input")

            if [ "$node" != "null" ] && [ -n "$repo" ]; then
              new_commit=$(nix flake metadata --json . | jq -r ".locks.nodes.$node.locked.rev")
              old_commit_var="OLD_COMMIT_$input"
              old_commit="${!old_commit_var:-}"

              echo "Input $input: old commit $old_commit, new commit $new_commit"

              if [ "$old_commit" != "$new_commit" ] && [ -n "$old_commit" ]; then
                echo "Fetching commits for $input from $repo..."

                if commits_json=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  "https://api.github.com/repos/$repo/compare/$old_commit...$new_commit"); then

                  all_commits=$(echo "$commits_json" | jq -r '.commits[]? | "- \(.commit.message | split("\n")[0]) ([\(.sha[0:7])](\(.html_url)))"' 2>/dev/null)

                  regular_commits=$(echo "$all_commits" | grep -v '\[Backport release-\|\[release-.* backport\]' || true)
                  backport_count=$(echo "$all_commits" | grep -c '\[Backport release-\|\[release-.* backport\]' || echo 0)

                  if echo "$commits_json" | jq -r '.commits[]?.commit.message | split("\n")[0]' | grep -iE "$REBOOT_PATTERNS" > /dev/null 2>&1; then
                    requires_reboot="true"
                    found_packages=$(echo "$commits_json" | jq -r '.commits[]?.commit.message | split("\n")[0]' | grep -iEo "$REBOOT_PATTERNS" | sort -u | tr '\n' ', ' | sed 's/,$//')
                    if [ -n "$found_packages" ]; then
                      reboot_packages="$reboot_packages$found_packages, "
                    fi

                    input_reboot_commits=$(echo "$commits_json" | jq -r --arg patterns "$REBOOT_PATTERNS" '.commits[]? | select(.commit.message | split("\n")[0] | test($patterns; "i")) | "- \(.commit.message | split("\n")[0]) ([\(.sha[0:7])](\(.html_url)))"' 2>/dev/null)
                    if [ -n "$input_reboot_commits" ]; then
                      reboot_commits="$reboot_commits"$'\n\n'"#### $input"$'\n'"$input_reboot_commits"
                    fi
                  fi

                  if [ -n "$regular_commits" ]; then
                    commit_count=$(echo "$regular_commits" | wc -l)
                    commits_to_show="$regular_commits"

                    if [ "$commit_count" -gt 300 ]; then
                      commits_to_show=$(echo "$regular_commits" | head -300)
                      commits_to_show="$commits_to_show"$'\n'"- ... and $(($commit_count - 300)) more commits"
                    fi

                    commit_lists="$commit_lists"$'\n\n'"### $input commits"$'\n'"$commits_to_show"

                    if [ "$backport_count" -gt 0 ]; then
                      commit_lists="$commit_lists"$'\n'"- ($backport_count backport commits filtered out)"
                    fi
                  elif [ "$backport_count" -gt 0 ]; then
                    commit_lists="$commit_lists"$'\n\n'"### $input commits"$'\n'"- ($backport_count backport commits filtered out)"
                  fi
                else
                  echo "Failed to fetch commits for $input, skipping commit list"
                fi
              fi
            fi
          done

          reboot_packages=$(echo "$reboot_packages" | sed 's/, $//')

          echo "REQUIRES_REBOOT=$requires_reboot" >> $GITHUB_ENV
          echo "REBOOT_PACKAGES=$reboot_packages" >> $GITHUB_ENV

          {
            echo "COMMIT_LISTS<<EOF"
            echo "$commit_lists"
            echo "EOF"
          } >> $GITHUB_ENV

          {
            echo "REBOOT_COMMITS<<EOF"
            echo "$reboot_commits"
            echo "EOF"
          } >> $GITHUB_ENV

          if [ "$requires_reboot" = "true" ]; then
            echo "Creating reboot marker file for auto-upgrade detection"
            sha256sum flake.lock | cut -d' ' -f1 > .nx-auto-upgrade-reboot-required
          fi

      - name: Create Pull Request
        if: steps.changes.outputs.changed == 'true'
        id: cpr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Update flake inputs: ${{ env.UPDATED_INPUTS }}"
          title: "Update flake inputs: ${{ env.UPDATED_INPUTS }}"
          body: |
            ## Automated update of flake inputs.

            ${{ env.REQUIRES_REBOOT == 'true' && '> [!WARNING]' || '' }}
            ${{ env.REQUIRES_REBOOT == 'true' && '> ⚠️ **System Reboot Required** ⚠️' || '' }}
            ${{ env.REQUIRES_REBOOT == 'true' && '> This update requires a reboot!' || '' }}

            ${{ env.REQUIRES_REBOOT == 'true' && '### 🔄 Reboot-triggering commits' || '' }}
            ${{ env.REQUIRES_REBOOT == 'true' && env.REBOOT_COMMITS || '' }}
            ${{ env.REQUIRES_REBOOT == 'true' && '---' || '' }}

            ### 📦 Updated inputs:
            - ${{ env.UPDATED_INPUTS }}
            ${{ env.COMMIT_LISTS }}

            Generated automatically by GitHub Actions
          branch: update-flake-inputs
          delete-branch: true
          sign-commits: true

      - name: Check if merge day
        id: check-day
        run: |
          set -euo pipefail
          # MERGE_DAYS="6"
          # current_day=$(date +%u)
          # if echo "$MERGE_DAYS" | grep -q "\b$current_day\b"; then
          #   echo "its_mergeday=true" >> $GITHUB_OUTPUT
          # else
          #   echo "its_mergeday=false" >> $GITHUB_OUTPUT
          # fi
          #
          # Disabled:
          echo "its_mergeday=false" >> $GITHUB_OUTPUT

      - name: Notify PR Created via Pushover
        if: steps.changes.outputs.changed == 'true' && steps.cpr.outputs.pull-request-operation == 'created' && (steps.check-day.outputs.its_mergeday != 'true' || env.REQUIRES_REBOOT == 'true')
        env:
          PUSHHOVER_TOKEN: ${{ secrets.PUSHOVER_TOKEN }}
          PUSHHOVER_USER: ${{ secrets.PUSHOVER_USER }}
        run: |
          set -euo pipefail
          curl -fsS -m 20 --retry 10 -o /dev/null \
            --form-string "token=${PUSHHOVER_TOKEN}" \
            --form-string "user=${PUSHHOVER_USER}" \
            --form-string "message=<b>Repository:</b> ${{ github.repository }}<br><b>Branch:</b> update-flake-inputs<br><b>Pull Request Title:</b> Update flake inputs: ${{ env.UPDATED_INPUTS }}<br><br><a href='${{ steps.cpr.outputs.pull-request-url }}'>View Pull Request</a>" \
            --form-string "title=🔵 New PR for ${{ github.repository }}: Update flake inputs: ${{ env.UPDATED_INPUTS }}" \
            --form-string "priority=0" \
            --form-string "html=1" \
            --form-string "url=${{ steps.cpr.outputs.pull-request-url }}" \
            https://api.pushover.net/1/messages.json

      - name: Enable auto-merge
        if: steps.changes.outputs.changed == 'true' && steps.check-day.outputs.its_mergeday == 'true' && env.REQUIRES_REBOOT != 'true'
        run: |
          set -euo pipefail
          echo "Enabling auto-merge for PR #${{ steps.cpr.outputs.pull-request-number }}"
          gh pr merge --auto --squash ${{ steps.cpr.outputs.pull-request-number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Skip auto-merge due to reboot-requiring packages
        if: steps.changes.outputs.changed == 'true' && steps.check-day.outputs.its_mergeday == 'true' && env.REQUIRES_REBOOT == 'true'
        run: |
          echo "⚠️ Auto-merge skipped: Update requires reboot! (${{ env.REBOOT_PACKAGES }})"
