name: Update Flake.lock
on:
  schedule:
    - cron: '0 13 * * *'
  workflow_dispatch:

jobs:
  update-flake-lock:
    runs-on: ubuntu-latest
    env:
      UPDATE_INPUTS: "nixpkgs"
      REPO_nixpkgs: "NixOS/nixpkgs"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v14

      - name: Extract commit hashes before update
        run: |
          set -euo pipefail

          get_lockfile_node() {
            nix flake metadata --json . | jq -r ".locks.nodes.root.inputs.$1"
          }

          IFS=',' read -ra inputs <<< "$UPDATE_INPUTS"

          declare -A old_commits
          for input in "${inputs[@]}"; do
            input=$(echo "$input" | xargs)
            node=$(get_lockfile_node "$input")
            if [ "$node" != "null" ]; then
              old_commit=$(nix flake metadata --json . | jq -r ".locks.nodes.$node.locked.rev")
              echo "OLD_COMMIT_$input=$old_commit" >> $GITHUB_ENV
              echo "Input $input: current commit $old_commit"
            fi
          done

      - name: Update flake inputs
        run: |
          set -euo pipefail

          IFS=',' read -ra inputs <<< "$UPDATE_INPUTS"
          updated_inputs=""

          for input in "${inputs[@]}"; do
            input=$(echo "$input" | xargs)
            echo "Updating input: $input"
            nix flake update "$input"
            if [ -z "$updated_inputs" ]; then
              updated_inputs="$input"
            else
              updated_inputs="$updated_inputs, $input"
            fi
          done
          echo "UPDATED_INPUTS=$updated_inputs" >> $GITHUB_ENV

      - name: Check for changes
        id: changes
        run: |
          set -euo pipefail
          if git diff --quiet flake.lock; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Generate commit lists
        if: steps.changes.outputs.changed == 'true'
        run: |
          set -euo pipefail

          get_lockfile_node() {
            nix flake metadata --json . | jq -r ".locks.nodes.root.inputs.$1"
          }

          get_repo() {
            local input=$1
            local repo_var="REPO_$input"
            echo "${!repo_var:-}"
          }

          IFS=',' read -ra inputs <<< "$UPDATE_INPUTS"

          commit_lists=""

          for input in "${inputs[@]}"; do
            input=$(echo "$input" | xargs)
            node=$(get_lockfile_node "$input")
            repo=$(get_repo "$input")

            if [ "$node" != "null" ] && [ -n "$repo" ]; then
              new_commit=$(nix flake metadata --json . | jq -r ".locks.nodes.$node.locked.rev")
              old_commit_var="OLD_COMMIT_$input"
              old_commit="${!old_commit_var:-}"

              echo "Input $input: old commit $old_commit, new commit $new_commit"

              if [ "$old_commit" != "$new_commit" ] && [ -n "$old_commit" ]; then
                echo "Fetching commits for $input from $repo..."

                if commits=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  "https://api.github.com/repos/$repo/compare/$old_commit...$new_commit" | \
                  jq -r '.commits[]? | "- \(.commit.message | split("\n")[0]) ([\(.sha[0:7])](\(.html_url)))"' 2>/dev/null); then

                  if [ -n "$commits" ]; then
                    commit_count=$(echo "$commits" | wc -l)
                    if [ "$commit_count" -gt 20 ]; then
                      commits=$(echo "$commits" | head -20)
                      commits="$commits"$'\n'"- ... and $(($commit_count - 20)) more commits"
                    fi

                    commit_lists="$commit_lists"$'\n\n'"### $input commits"$'\n'"$commits"
                  fi
                else
                  echo "Failed to fetch commits for $input, skipping commit list"
                fi
              fi
            fi
          done

          {
            echo "COMMIT_LISTS<<EOF"
            echo "$commit_lists"
            echo "EOF"
          } >> $GITHUB_ENV

      - name: Create Pull Request
        if: steps.changes.outputs.changed == 'true'
        id: cpr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          commit-message: "Update flake inputs: ${{ env.UPDATED_INPUTS }}"
          title: "Update flake inputs: ${{ env.UPDATED_INPUTS }}"
          body: |
            ## Automated update of flake inputs.

            ### Updated inputs:
            - ${{ env.UPDATED_INPUTS }}
            ${{ env.COMMIT_LISTS }}

            Generated automatically by GitHub Actions
          branch: update-flake-inputs
          delete-branch: true
          sign-commits: true

      # - name: Check if merge day
      #   id: check-day
      #   run: |
      #     set -euo pipefail
      #     if [ "$(date +%u)" = "6" ]; then
      #       echo "its_mergeday=true" >> $GITHUB_OUTPUT
      #     else
      #       echo "its_mergeday=false" >> $GITHUB_OUTPUT
      #     fi

      # - name: Enable auto-merge
      #   if: steps.changes.outputs.changed == 'true' && steps.check-day.outputs.its_mergeday == 'true'
      #   run: |
      #     set -euo pipefail
      #     gh pr merge --auto --squash ${{ steps.cpr.outputs.pull-request-number }}
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
